import tensorflow as tf
def prepare_total_variation(inputs_flat_shape):
    def total_variation(inputs, x_logits):
        imageB = tf.sigmoid(x_logits)
        #imageA = inputs
        imageB = tf.reshape(imageB, tf.TensorShape(inputs_flat_shape))
        #imageA = tf.reshape(imageA, tf.TensorShape(inputs_flat_shape))

        """
        The total variation is the sum of the absolute differences for neighboring pixel-values in the input images. This measures how much noise is in the images.

        This can be used as a loss-function during optimization so as to suppress noise in images. 
        If you have a batch of images, then you should calculate the scalar loss-value as the sum: 
        loss = tf.reduce_sum(tf.image.total_variation(images))
    
        @param gen_frames: A tensor of shape [batch_size, height, width, 3]. The frames generated by the generator model.
        @param gt_frames: A tensor of shape [batch_size, height, width, 3]. The ground-truth frames for each frame in gen_frames.
        @return: A scalar tensor. The mean Peak Signal to Noise Ratio error over each frame in the batch.
        """

        return tf.reduce_sum(tf.image.total_variation(imageB), name='total_variation')
    return total_variation
